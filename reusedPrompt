Here's my routes/urls.js:
const express = require('express');
const mongoose = require('mongoose');

const router = express.Router();
const URL = require('../models/URL');
const Media = mongoose.model('Media');
const Spoiler = mongoose.model('Spoiler');

// New URL form
router.get('/new', async (req, res) => {
  const media = await Media.find({});
  const spoilers = await Spoiler.find({});
  res.render('urls/new', { media, spoilers });
});

// Create URL
router.post('/', async (req, res) => {
  const url = new URL(req.body);

  const validationError = url.validateSync();
  if (validationError) {
    return res.status(400).json({
      status: 'error',
      message: 'Validation failed',
      errors: validationError.errors
    });
  }

  await url.save();
  await Media.updateOne(
    { _id: url.media },
    { $push: { urls: url._id } }
  );
  await Spoiler.updateOne(
    { _id: url.spoiler },
    { $push: { urls: url._id } }
  );
  // Test compatability
  if (req.get('Accept') === 'application/json') {
    return res.status(200).json(url);
  }
  res.redirect('/urls');
});


// Edit URL form
router.get('/:id/edit', async (req, res) => {
  const url = await URL.findById(req.params.id);
  const media = await Media.find({});
  const spoilers = await Spoiler.find({});
  res.render('urls/edit', { url, media, spoilers });
});

// Update URL
router.put('/:id', async (req, res) => {
  await URL.findByIdAndUpdate(req.params.id, req.body);
  // Test compatability
  if (req.get('Accept') === 'application/json') {
    return res.status(200).send();
    // Currently only returning 200 status code
    // .json data can be returned from a GET request
  }
  res.redirect('/urls');
});

// Delete URL
router.delete('/:id', async (req, res) => {
  await URL.findByIdAndDelete(req.params.id);
  // Test compatability
  if (req.get('Accept') === 'application/json') {
    return res.status(200).send();
  }
  res.redirect('/urls');
});

// List URLs
router.get('/', async (req, res) => {
  const urls = await URL.find({}).populate('media').populate('spoiler');
  res.render('urls/index', { urls, title: 'URLs' });
});

// Show URL
router.get('/:id', async (req, res) => {
  try {
    const url = await URL.findById(req.params.id);
    // If URL is found, populate the related fields
    if (url) {
      await url.populate('media').populate('spoiler').execPopulate();
    }

    // Test compatibility
    if (req.get('Accept') === 'application/json') {
      return res.status(200).json(url);
    }
    res.render('urls/show', { url });
  } catch (error) {
    console.error("Error while getting URL:", error);
    return res.status(500).json({
      status: 'error',
      message: 'Internal Server Error'
    });
  }
});


module.exports = router;

here's urls.test.js:
const chai = require('chai');
const chaiHttp = require('chai-http');
const server = require('../app');
const expect = chai.expect;

chai.use(chaiHttp);



describe('URLs', function() {
    let mediaId;    // will be used to store the ID of the associated media document
    let partId;     // will be used to store the ID of the part associated with the spoiler document, from the media document
    let spoilerId;  // will be used to store the ID of the created spoiler document
    let urlId;      // will be used to store the ID of the created URL document

    // We first create the media document, then the spoiler document that the URL will be attached to
    before(async function() {
        const mediaData = {
            title: 'Test Media',
            type: 'Other',
            parts: [{ title: 'Part 1' }, { title: 'Part 2' }]
        };

        let res = await chai.request(server)
            .post('/media')
            .set('Accept', 'application/json')
            .send(mediaData);

        mediaId = res.body._id;

        res = await chai.request(server)
            .get(`/media/${mediaId}`)
            .set('Accept', 'application/json');

        partId = res.body.parts[0]._id;

        const spoilerData = {
            title: 'Test Spoiler',
            intensity: 'No Spoilers',
            reference: 'Test Reference',
            mediaId: mediaId
        };

        res = await chai.request(server)
            .post('/spoilers')
            .set('Accept', 'application/json')
            .send(spoilerData);

        spoilerId = res.body._id;

        if (mediaId && partId && spoilerId) {
            console.log('Media, part, and spoiler documents created successfully.');
        }
    });

    // Tests for invalid POST requests
    it('should fail to create a new URL document with missing fields', function(done) {
        const urlData = {
          media: mediaId,
          spoiler: spoilerId,
          description: 'Test URL'
        };
      
        chai.request(server)
          .post('/urls')
          .set('Accept', 'application/json')
          .send(urlData)
          .end(function(err, res) {
            expect(res).to.have.status(400);
            expect(res.body).to.have.property('message', 'Validation failed');
            expect(res.body.errors).to.have.property('url');
            done();
          });
    });
    it('should fail to create a new URL document with invalid media ID', function(done) {
        const urlData = {
          url: 'https://www.testurl.com',
          media: 'invalid-media-id',
          spoiler: spoilerId,
          description: 'Test URL'
        };
      
        chai.request(server)
          .post('/urls')
          .set('Accept', 'application/json')
          .send(urlData)
          .end(function(err, res) {
            expect(res).to.have.status(400); // or other appropriate error code
            done();
          });
    });
    it('should fail to create a new URL document with invalid spoiler ID', function(done) {
        const urlData = {
            url: 'https://www.testurl.com',
            media: mediaId,
            spoiler: 'invalid-spoiler-id',
            description: 'Test URL'
        };
        
        chai.request(server)
            .post('/urls')
            .set('Accept', 'application/json')
            .send(urlData)
            .end(function(err, res) {
                expect(res).to.have.status(400);
                done();
            });
    });

    // Test for the successful creation of a URL document
    it('should create a new URL document', function(done) {
        const urlData = {
            url: 'https://www.testurl.com',
            media: mediaId,
            spoiler: spoilerId,
            description: 'Test URL'
        };

        chai.request(server)
            .post('/urls')
            .set('Accept', 'application/json')
            .send(urlData)
            .end(function(err, res) {
                expect(res).to.have.status(200);
                expect(res.body).to.be.an('object');
                expect(res.body).to.have.property('_id');
                urlId = res.body._id;
                done();
            });
    });

    // Test for the successful reading of a URL document
    it('should read an existing URL document', function(done) {
        chai.request(server)
            .get(`/urls/${urlId}`)
            .set('Accept', 'application/json')
            .end(function(err, res) {
                expect(res).to.have.status(200);
                expect(res.body).to.be.an('object');
                expect(res.body).to.have.property('_id', urlId);
                done();
            });
    });

    // Test for editing a URL document
    it('should update an existing URL document', function(done) {
        const updatedData = {
            url: 'https://www.updatedurl.com',
            media: mediaId,
            spoiler: spoilerId,
            description: 'Updated URL'
        };

        chai.request(server)
            .put(`/urls/${urlId}`)
            .set('Accept', 'application/json')
            .send(updatedData)
            .end(function(err, res) {
                expect(res).to.have.status(200);

                // Make a request to the API to check if the updated data was stored correctly
                chai.request(server)
                    .get(`/urls/${urlId}`)
                    .set('Accept', 'application/json')
                    .end(function(err, res) {
                        expect(res.body).to.have.property('url', updatedData.url);
                        expect(res.body).to.have.property('description', updatedData.description);
                        done();
                    });
            });
    });

    // Test for deleting a URL document
    it('should delete an existing URL document', function(done) {
        chai.request(server)
            .delete(`/urls/${urlId}`)
            .set('Accept', 'application/json')
            .end(function(err, res) {
                expect(res).to.have.status(200);
                done();
            });
    });

    // We delete the media document and the associated spoiler document after the tests are done
    after(async function() {
        let res = await chai.request(server)
            .delete(`/media/${mediaId}`)
            .set('Accept', 'application/json');

        res = await chai.request(server)
            .delete(`/spoilers/${spoilerId}`)
            .set('Accept', 'application/json');
    });
});

here's the test results: 
Media
    ✔ should create a new media document (57ms)
    ✔ should return 404 Not Found for GETting an invalid ID
    ✔ should read an existing media document
    ✔ should update an existing media document
    ✔ should delete parts from an existing media document
    ✔ should return 400 Bad Request if type field is missing
    ✔ should return 400 Bad Request if type field has an invalid value
    ✔ should return 400 Bad Request if parts field has an invalid format
    ✔ should return 404 if media ID does not exist
    ✔ should return 400 for invalid type
    ✔ should return 400 for invalid parts format
    ✔ should return 404 if media ID to delete does not exist
    ✔ should delete an existing media document

  Spoilers
    ✔ should not create a new spoiler document with missing title
    ✔ should not create a new spoiler document with missing intensity
    ✔ should not create a new spoiler document with an invalid intensity
    ✔ should not create a new spoiler document with missing reference
    ✔ should not create a new spoiler document without associating it with a media
    ✔ should not create a new spoiler document with an invalid media ID
    ✔ should not create a new spoiler document with an invalid part ID
    ✔ should create a new spoiler document with no part associtation
    ✔ should read an existing spoiler document with no part associtation
    ✔ should not update an existing spoiler document with missing title
    ✔ should not update an existing spoiler document with missing intensity
    ✔ should not update an existing spoiler document with missing reference
    ✔ should not update an existing spoiler document with a missing media association
    ✔ should not update an existing spoiler document with an invalid media ID
    ✔ should not update an existing spoiler document with an invalid part ID
    ✔ should update an existing spoiler document with no part association
    ✔ should delete an existing spoiler document with no part association
    ✔ should create a new spoiler document with a part associtation
    ✔ should read an existing spoiler document with a part associtation
    ✔ should update an existing spoiler document with a part associtation
    ✔ should delete an existing spoiler document with a part associtation

  URLs
Media, part, and spoiler documents created successfully.
    ✔ should fail to create a new URL document with missing fields
    ✔ should fail to create a new URL document with invalid media ID
    ✔ should fail to create a new URL document with invalid spoiler ID
    ✔ should create a new URL document
Error while getting URL: TypeError: url.populate(...).populate is not a function
    at D:\Uni\Misc\Chrome Extensions\spoilers\routes\urls.js:88:35
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    1) should read an existing URL document
Error while getting URL: TypeError: url.populate(...).populate is not a function
    at D:\Uni\Misc\Chrome Extensions\spoilers\routes\urls.js:88:35
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    2) should update an existing URL document
    ✔ should delete an existing URL document


  39 passing (533ms)
  2 failing

  1) URLs
       should read an existing URL document:

      Uncaught AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500
      + expected - actual

      -500
      +200

      at D:\Uni\Misc\Chrome Extensions\spoilers\test\urls.test.js:138:37
      at Request.callback (node_modules\superagent\lib\node\index.js:857:12)
      at D:\Uni\Misc\Chrome Extensions\spoilers\node_modules\superagent\lib\node\index.js:1070:18
      at IncomingMessage.<anonymous> (node_modules\superagent\lib\node\parsers\json.js:21:7)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21)

  2) URLs
       should update an existing URL document:
     Uncaught AssertionError: expected { status: 'error', …(1) } to have property 'url'
      at D:\Uni\Misc\Chrome Extensions\spoilers\test\urls.test.js:166:50
      at Request.callback (node_modules\superagent\lib\node\index.js:857:12)
      at D:\Uni\Misc\Chrome Extensions\spoilers\node_modules\superagent\lib\node\index.js:1070:18
      at IncomingMessage.<anonymous> (node_modules\superagent\lib\node\parsers\json.js:21:7)
      at IncomingMessage.emit (node:events:525:35)
      at endReadableNT (node:internal/streams/readable:1359:12)
      at process.processTicksAndRejections (node:internal/process/task_queues:82:21)